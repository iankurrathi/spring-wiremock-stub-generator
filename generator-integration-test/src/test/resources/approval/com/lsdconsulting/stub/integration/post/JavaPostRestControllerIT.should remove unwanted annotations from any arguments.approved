package com.lsdconsulting.stub.integration.controller.post;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
import static java.lang.String.format;
import javax.annotation.processing.Generated;
import org.springframework.format.AnnotationFormatterFactory;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.Printer;
import java.util.Locale;
import java.lang.annotation.Annotation;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static java.util.stream.Collectors.toList;
import static java.nio.charset.StandardCharsets.UTF_8;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class JavaPostRestControllerStub {

    private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
    private static final String CONTENT_TYPE_HEADER_VALUE = "application/json; charset=utf-8";
    private static final int OK = 200;
    private static final int ONCE = 1;
    private static final int NEVER = 0;

    private ObjectMapper objectMapper;
    private AnnotationFormatterFactory annotationFormatterFactory;

    public JavaPostRestControllerStub(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public JavaPostRestControllerStub(ObjectMapper objectMapper, AnnotationFormatterFactory annotationFormatterFactory) {
        this.objectMapper = objectMapper;
        this.annotationFormatterFactory = annotationFormatterFactory;
    }

    private static final String RESOURCEWITHBODYANDANNOTATIONS_URL = "/postController/resourceWithBodyAndAnnotations";

    public void postResourceWithBodyAndAnnotations(
        com.lsdconsulting.stub.integration.model.GreetingResponse response                                        ) {

        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                            stub(OK, buildBody(response), mappingBuilder);
            }

        public void postResourceWithBodyAndAnnotations(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest        , com.lsdconsulting.stub.integration.model.GreetingResponse response                        ) {

        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url)).withRequestBody(equalToJson(buildBody(greetingRequest)));
                            stub(OK, buildBody(response), mappingBuilder);
            }
    
    public void postResourceWithBodyAndAnnotations(int httpStatus, String errorResponse) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                        stub(httpStatus, errorResponse, mappingBuilder);
            }

    public void verifyPostResourceWithBodyAndAnnotations(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        verifyPostResourceWithBodyAndAnnotations(ONCE, greetingRequest);
    }

    public void verifyPostResourceWithBodyAndAnnotations(final int times, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
                    RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(format(url)));
                                            requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(times, requestPatternBuilder);
            }

    public void verifyPostResourceWithBodyAndAnnotationsNoInteraction(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
                    RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(format(url)));
                                            requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(NEVER, requestPatternBuilder);
            }

        public void verifyPostResourceWithBodyAndAnnotationsNoInteractionWithUrl() {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
        verify(NEVER, postRequestedFor(urlPathEqualTo(url)));
    }
        private static final String RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL = "/postController/resourceWithBodyAndAnnotationsOnPathVariables/%s";

    public void postResourceWithBodyAndAnnotationsOnPathVariables(
        com.lsdconsulting.stub.integration.model.GreetingResponse response        ,          java.lang.String param                                            ) {

        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                            stub(OK, buildBody(response), mappingBuilder);
            }

        public void postResourceWithBodyAndAnnotationsOnPathVariables(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest        , com.lsdconsulting.stub.integration.model.GreetingResponse response        , java.lang.String param                ) {

        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url)).withRequestBody(equalToJson(buildBody(greetingRequest)));
                            stub(OK, buildBody(response), mappingBuilder);
            }
    
    public void postResourceWithBodyAndAnnotationsOnPathVariables(int httpStatus, String errorResponse, java.lang.String param) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                        stub(httpStatus, errorResponse, mappingBuilder);
            }

    public void verifyPostResourceWithBodyAndAnnotationsOnPathVariables( java.lang.String param, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        verifyPostResourceWithBodyAndAnnotationsOnPathVariables(ONCE, param, greetingRequest);
    }

    public void verifyPostResourceWithBodyAndAnnotationsOnPathVariables(final int times, java.lang.String param, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
                    RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(format(url)));
                                            requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(times, requestPatternBuilder);
            }

    public void verifyPostResourceWithBodyAndAnnotationsOnPathVariablesNoInteraction( java.lang.String param, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
                    RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(format(url)));
                                            requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(NEVER, requestPatternBuilder);
            }

        public void verifyPostResourceWithBodyAndAnnotationsOnPathVariablesNoInteractionWithUrl( java.lang.String param) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
        verify(NEVER, postRequestedFor(urlPathEqualTo(url)));
    }
    
    void stub(final int status, final String response, final MappingBuilder mappingBuilder) {
        stubFor(mappingBuilder
                .willReturn(
                        aResponse()
                                .withStatus(status)
                                .withBody(response)
                                .withHeader(CONTENT_TYPE_HEADER_NAME, CONTENT_TYPE_HEADER_VALUE)
                )
        );
    }

    String buildBody(final Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    String serialise(Object object, String clazz, String iso, String pattern, String style, String...fallbackPatterns) {
        if (annotationFormatterFactory == null) {
            throw new IllegalStateException("annotationFormatterFactory not set");
        }

        DateTimeFormat dateTimeFormat= new DateTimeFormat() {

            @Override
            public Class<? extends Annotation> annotationType() {
                return null;
            }

            @Override
            public String style() {
                return style;
            }

            @Override
            public ISO iso() {
                return ISO.valueOf(iso);
            }

            @Override
            public String pattern() {
                return pattern;
            }

            @Override
            public String[] fallbackPatterns() {
                return fallbackPatterns;
            }
        };
        try {
            Printer printer = annotationFormatterFactory.getPrinter(
                                dateTimeFormat,
                                Class.forName(clazz)
                            );
            return printer.print(object, Locale.getDefault());
        } catch(ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
}



