package com.lsdconsulting.stub.integration.controller.get;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
import static java.lang.String.format;
import javax.annotation.processing.Generated;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static java.util.stream.Collectors.toList;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class JavaGetRestControllerStub {

    private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
    private static final String CONTENT_TYPE_HEADER_VALUE = "application/json; charset=utf-8";
    private static final int OK = 200;
    private static final int ONCE = 1;
    private static final int NEVER = 0;

    private ObjectMapper objectMapper;

    public JavaGetRestControllerStub(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    
    private static final String RESOURCEWITHPARAMANDANNOTATIONS_URL = "/getController/resourceWithParamAndAnnotations";

    public void getResourceWithParamAndAnnotations(
        com.lsdconsulting.stub.integration.model.GreetingResponse response        ,                         java.lang.String param                            ) {

        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = get(urlPathEqualTo(url));
                                        mappingBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                            stub(OK, buildBody(response), mappingBuilder);
            }

    public void getResourceWithParamAndAnnotations(int httpStatus, String errorResponse, java.lang.String param) {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = get(urlPathEqualTo(url));
                                    mappingBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                            stub(httpStatus, errorResponse, mappingBuilder);
            }

    public void verifyGetResourceWithParamAndAnnotations(java.lang.String param) {
        verifyGetResourceWithParamAndAnnotations(ONCE, param);
    }

    public void verifyGetResourceWithParamAndAnnotations(final int times, java.lang.String param) {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
                    RequestPatternBuilder requestPatternBuilder = getRequestedFor(urlPathEqualTo(format(url)));
                                        requestPatternBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                                        verify(times, requestPatternBuilder);
            }

    public void verifyGetResourceWithParamAndAnnotationsNoInteraction(java.lang.String param) {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
                    RequestPatternBuilder requestPatternBuilder = getRequestedFor(urlPathEqualTo(format(url)));
                                        requestPatternBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                                        verify(NEVER, requestPatternBuilder);
            }

        public void verifyGetResourceWithParamAndAnnotationsNoInteractionWithUrl() {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
        verify(NEVER, getRequestedFor(urlPathEqualTo(format(url))));
    }
        
    void stub(final int status, final String response, final MappingBuilder mappingBuilder) {
        stubFor(mappingBuilder
                .willReturn(
                        aResponse()
                                .withStatus(status)
                                .withBody(response)
                                .withHeader(CONTENT_TYPE_HEADER_NAME, CONTENT_TYPE_HEADER_VALUE)
                )
        );
    }

    String buildBody(final Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}



