package {# @pebvariable name="model" type="io.lsdconsulting.stub.model.ControllerModel" #}{{model.packageName}};

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
import static java.lang.String.format;
import javax.annotation.processing.Generated;
import org.springframework.format.AnnotationFormatterFactory;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.Printer;
import java.util.Locale;
import java.lang.annotation.Annotation;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static java.util.stream.Collectors.toList;
import static java.nio.charset.StandardCharsets.UTF_8;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class {{model.stubClassName}} {

    private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
    private static final String CONTENT_TYPE_HEADER_VALUE = "application/json; charset=utf-8";
    private static final int OK = 200;
    private static final int ONCE = 1;
    private static final int NEVER = 0;

    private ObjectMapper objectMapper;
    private AnnotationFormatterFactory annotationFormatterFactory;

    public {{model.stubClassName}}(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public {{model.stubClassName}}(ObjectMapper objectMapper, AnnotationFormatterFactory annotationFormatterFactory) {
        this.objectMapper = objectMapper;
        this.annotationFormatterFactory = annotationFormatterFactory;
    }

{% for entry in model.getResources %}
    private static final String {{entry.value.methodName.toUpperCase()}}_URL = "{{model.rootResource}}{{entry.value.subResource}}";

    public void {{entry.value.httpMethod.name() | lower}}{{entry.value.methodName}}(
        {% if entry.value.responseType is not empty%}{{entry.value.responseType | raw}} response{% endif %}
        {% if entry.value.responseType is not empty and (entry.value.requestParameters is not empty or entry.value.pathVariables  is not empty)%}, {% endif %}
        {% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}
            {% if not loop.last %}, {% endif %}
        {% endfor %}
        {% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}
        {% for entry2 in entry.value.requestParameters %}{{entry2.value.type | raw}} {{entry2.value.name}}
            {% if not loop.last %}, {% endif %}
        {% endfor %}
        ) {

        {{ generateUrl(entry) }}
        {% if entry.value.hasMultiValueRequestParams %}
            {{ addRequestParamsToUrl(entry) }}
        stub({% if entry.value.responseStatus is empty%}OK{% else %}{{ entry.value.responseStatus }}{% endif %}, {% if entry.value.responseType is not empty%}buildBody(response){% else %}null{% endif %}, {{entry.value.httpMethod.name() | lower}}(urlEqualTo(url)));
        {% else %}
            MappingBuilder mappingBuilder = {{entry.value.httpMethod.name() | lower}}(urlPathEqualTo(url));
            {{ addQueryParamsToMappingBuilder(entry) }}
            stub({% if entry.value.responseStatus is empty%}OK{% else %}{{ entry.value.responseStatus }}{% endif %}, {% if entry.value.responseType is not empty%}buildBody(response){% else %}null{% endif %}, mappingBuilder);
        {% endif %}
    }

    {% if (entry.value.httpMethod.name() == "POST" and entry.value.requestBody != null) %}
    public void {{entry.value.httpMethod.name() | lower}}{{entry.value.methodName}}({{ entry.value.requestBody.type | raw }} {{ entry.value.requestBody.name }}
        {% if entry.value.responseType is not empty%}, {{entry.value.responseType | raw}} response{% endif %}
        {% if entry.value.responseType is not empty and (entry.value.requestParameters is not empty or entry.value.pathVariables  is not empty)%}, {% endif %}
        {% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}
            {% if not loop.last %}, {% endif %}
        {% endfor %}
        {% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}
        {% for entry2 in entry.value.requestParameters %}{{entry2.value.type | raw}} {{entry2.value.name}}
            {% if not loop.last %}, {% endif %}
        {% endfor %}
        ) {

        {{ generateUrl(entry) }}
        {% if entry.value.hasMultiValueRequestParams %}
            {{ addRequestParamsToUrl(entry) }}
        stub({% if entry.value.responseStatus is empty%}OK{% else %}{{ entry.value.responseStatus }}{% endif %}, {% if entry.value.responseType is not empty%}buildBody(response){% else %}null{% endif %}, {{entry.value.httpMethod.name() | lower}}(urlEqualTo(url)));
        {% else %}
            MappingBuilder mappingBuilder = {{entry.value.httpMethod.name() | lower}}(urlPathEqualTo(url)).withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})));
            {{ addQueryParamsToMappingBuilder(entry) }}
            stub({% if entry.value.responseStatus is empty%}OK{% else %}{{ entry.value.responseStatus }}{% endif %}, {% if entry.value.responseType is not empty%}buildBody(response){% else %}null{% endif %}, mappingBuilder);
        {% endif %}
    }
    {% endif %}

    public void {{entry.value.httpMethod.name() | lower}}{{entry.value.methodName}}(int httpStatus, String errorResponse{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type | raw}} {{entry2.value.name}}{% endfor %}) {
        {{ generateUrl(entry) }}
        {% if entry.value.hasMultiValueRequestParams %}
            {{ addRequestParamsToUrl(entry) }}
            stub(httpStatus, errorResponse, {{entry.value.httpMethod.name() | lower}}(urlEqualTo(url)));
        {% else %}
            MappingBuilder mappingBuilder = {{entry.value.httpMethod.name() | lower}}(urlPathEqualTo(url));
        {{ addQueryParamsToMappingBuilder(entry) }}
            stub(httpStatus, errorResponse, mappingBuilder);
        {% endif %}
    }

    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}{% for entry2 in entry.value.requestParameters %}{{entry2.value.type | raw}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (((entry.value.requestParameters is not empty) or (entry.value.pathVariables  is not empty)) and entry.value.requestBody is not empty)%}, {% endif %}{% if entry.value.requestBody is not empty%}{{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}(ONCE{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.name}}{% endfor %}{% if entry.value.requestBody is not empty%}, {{ entry.value.requestBody.name }}{% endif %});
    }

    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}(final int times{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type | raw}} {{entry2.value.name}}{% endfor %}{% if entry.value.requestBody is not empty%}, {{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        {{ generateUrl(entry) }}
        {% if entry.value.hasMultiValueRequestParams %}
            {{ addRequestParamsToUrl(entry) }}
            verify(times, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlEqualTo(url))
                {% if entry.value.requestBody is not empty%}
                .withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})))
                {% endif %}
            );
        {% else %}
            RequestPatternBuilder requestPatternBuilder = {{entry.value.httpMethod.name() | lower}}RequestedFor(urlPathEqualTo(format(url)));
            {{ addQueryParamsToRequestPatternBuilder(entry) }}
            {% if entry.value.requestBody is not empty%}
                requestPatternBuilder.withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})));
            {% endif %}
            verify(times, requestPatternBuilder);
        {% endif %}
    }

    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}NoInteraction({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}{% for entry2 in entry.value.requestParameters %}{{entry2.value.type | raw}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (((entry.value.requestParameters is not empty) or (entry.value.pathVariables  is not empty)) and entry.value.requestBody is not empty)%}, {% endif %}{% if entry.value.requestBody is not empty%}{{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        {{ generateUrl(entry) }}
        {% if entry.value.hasMultiValueRequestParams %}
            {{ addRequestParamsToUrl(entry) }}
            verify(NEVER, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlEqualTo(url))
                {% if entry.value.requestBody is not empty%}
                .withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})))
                {% endif %}
            );
        {% else %}
            RequestPatternBuilder requestPatternBuilder = {{entry.value.httpMethod.name() | lower}}RequestedFor(urlPathEqualTo(format(url)));
            {{ addQueryParamsToRequestPatternBuilder(entry) }}
            {% if entry.value.requestBody is not empty%}
                requestPatternBuilder.withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})));
            {% endif %}
            verify(NEVER, requestPatternBuilder);
        {% endif %}
    }

    {% if not entry.value.hasMultiValueRequestParams %}
    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}NoInteractionWithUrl({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}) {
        {{ generateUrl(entry) }}
        verify(NEVER, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlPathEqualTo(url)));
    }
    {% endif %}
{% endfor %}

    void stub(final int status, final String response, final MappingBuilder mappingBuilder) {
        stubFor(mappingBuilder
                .willReturn(
                        aResponse()
                                .withStatus(status)
                                .withBody(response)
                                .withHeader(CONTENT_TYPE_HEADER_NAME, CONTENT_TYPE_HEADER_VALUE)
                )
        );
    }

    String buildBody(final Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    String serialise(Object object, String clazz, String iso, String pattern, String style, String...fallbackPatterns) {
        if (annotationFormatterFactory == null) {
            throw new IllegalStateException("annotationFormatterFactory not set");
        }

        DateTimeFormat dateTimeFormat= new DateTimeFormat() {

            @Override
            public Class<? extends Annotation> annotationType() {
                return null;
            }

            @Override
            public String style() {
                return style;
            }

            @Override
            public ISO iso() {
                return ISO.valueOf(iso);
            }

            @Override
            public String pattern() {
                return pattern;
            }

            @Override
            public String[] fallbackPatterns() {
                return fallbackPatterns;
            }
        };
        try {
            Printer printer = annotationFormatterFactory.getPrinter(
                                dateTimeFormat,
                                Class.forName(clazz)
                            );
            return printer.print(object, Locale.getDefault());
        } catch(ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
}
{% macro generateUrl(entry) %}
String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
{% endmacro %}

{% macro addRequestParamsToUrl(entry) %}
    {% for entry2 in entry.value.requestParameters %}
        {% if loop.first %}
            url = url + "?";
        {% else %}
            url = url + "&";
        {% endif %}
        {% if entry2.value.iterable %}
            url = url + "{{entry2.value.name}}=";
            {% if entry2.value.dateTimeFormatAnnotation is not empty %}
                url = url + String.join("&{{entry2.value.name}}=", {{entry2.value.name}}.stream().map(x -> serialise(x, "{{entry2.value.dateTimeFormatAnnotation.clazz}}", "{{entry2.value.dateTimeFormatAnnotation.iso}}", "{{entry2.value.dateTimeFormatAnnotation.pattern | raw}}", "{{entry2.value.dateTimeFormatAnnotation.style}}", "{{entry2.value.dateTimeFormatAnnotation.fallbackPatterns | join('","') | raw}}")).collect(toList()));
            {% else %}
                url = url + String.join("&{{entry2.value.name}}=", {{entry2.value.name}}.stream().map(x -> x.toString()).collect(toList()));
            {% endif %}
        {% else %}
            {% if entry2.value.dateTimeFormatAnnotation is not empty %}
                url = url + "{{entry2.value.name}}=" + serialise({{entry2.value.name}}, "{{entry2.value.dateTimeFormatAnnotation.clazz}}", "{{entry2.value.dateTimeFormatAnnotation.iso}}", "{{entry2.value.dateTimeFormatAnnotation.pattern | raw}}", "{{entry2.value.dateTimeFormatAnnotation.style}}", "{{entry2.value.dateTimeFormatAnnotation.fallbackPatterns | join('","') | raw}}");
            {% else %}
                url = url + "{{entry2.value.name}}=" + {{entry2.value.name}};
            {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro addQueryParamsToMappingBuilder(entry) %}
    {% for entry2 in entry.value.requestParameters %}
        {% if entry2.value.optional %}
            if ({{entry2.value.name}} != null) {
        {% endif %}
        {% if entry2.value.dateTimeFormatAnnotation is not empty %}
            mappingBuilder.withQueryParam("{{entry2.value.name}}", equalTo(serialise({{entry2.value.name}}, "{{entry2.value.dateTimeFormatAnnotation.clazz}}", "{{entry2.value.dateTimeFormatAnnotation.iso}}", "{{entry2.value.dateTimeFormatAnnotation.pattern | raw}}", "{{entry2.value.dateTimeFormatAnnotation.style}}", "{{entry2.value.dateTimeFormatAnnotation.fallbackPatterns | join('","') | raw}}")));
        {% else %}
            mappingBuilder.withQueryParam("{{entry2.value.name}}", equalTo(String.valueOf({{entry2.value.name}})));
        {% endif %}
        {% if entry2.value.optional %}
            }
        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro addQueryParamsToRequestPatternBuilder(entry) %}
    {% for entry2 in entry.value.requestParameters %}
        {% if entry2.value.optional %}
            if ({{entry2.value.name}} != null) {
        {% endif %}
        {% if entry2.value.dateTimeFormatAnnotation is not empty %}
            requestPatternBuilder.withQueryParam("{{entry2.value.name}}", equalTo(serialise({{entry2.value.name}}, "{{entry2.value.dateTimeFormatAnnotation.clazz}}", "{{entry2.value.dateTimeFormatAnnotation.iso}}", "{{entry2.value.dateTimeFormatAnnotation.pattern | raw}}", "{{entry2.value.dateTimeFormatAnnotation.style}}", "{{entry2.value.dateTimeFormatAnnotation.fallbackPatterns | join('","') | raw}}")));
        {% else %}
            requestPatternBuilder.withQueryParam("{{entry2.value.name}}", equalTo(String.valueOf({{entry2.value.name}})));
        {% endif %}
        {% if entry2.value.optional %}
            }
        {% endif %}
    {% endfor %}
{% endmacro %}
