package {# @pebvariable name="model" type="io.lsdconsulting.stub.model.ControllerModel" #}{{model.packageName}};

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import static java.lang.String.format;
import javax.annotation.processing.Generated;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static java.util.stream.Collectors.toList;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class {{model.stubClassName}} {

    private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
    private static final String CONTENT_TYPE_HEADER_VALUE = "application/json; charset=utf-8";
    private static final int OK = 200;
    private static final int ONCE = 1;
    private static final int NEVER = 0;

    private ObjectMapper objectMapper;

    public {{model.stubClassName}}(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    {% for entry in model.getResources %}

    private static final String {{entry.value.methodName.toUpperCase()}}_URL = "{{model.rootResource}}{{entry.value.subResource}}";

    public void {{entry.value.httpMethod.name() | lower}}{{entry.value.methodName}}(
        {% if entry.value.responseType is not empty%}{{entry.value.responseType | raw}} response{% endif %}
        {% if entry.value.responseType is not empty and (entry.value.requestParameters is not empty or entry.value.pathVariables  is not empty)%}, {% endif %}
        {% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}
            {% if not loop.last %}, {% endif %}
        {% endfor %}
        {% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}
        {% for entry2 in entry.value.requestParameters %}{{entry2.value.type | raw}} {{entry2.value.name}}
            {% if not loop.last %}, {% endif %}
        {% endfor %}
        ) {

        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        {% if entry.value.hasMultiValueRequestParams %}
            {% for entry2 in entry.value.requestParameters %}
                {% if loop.first %}
                    url = url + "?";
                {% else %}
                    url = url + "&";
                {% endif %}
                {% if entry2.value.iterable %}
                    url = url + "{{entry2.value.name}}=";
                    url = url + String.join("&{{entry2.value.name}}=", {{entry2.value.name}}.stream().map(x -> x.toString()).collect(toList()));
                {% else %}
                    url = url + "{{entry2.value.name}}=" + {{entry2.value.name}};
                {% endif %}
            {% endfor %}
        stub({% if entry.value.responseStatus is empty%}OK{% else %}{{ entry.value.responseStatus }}{% endif %}, {% if entry.value.responseType is not empty%}buildBody(response){% else %}null{% endif %}, {{entry.value.httpMethod.name() | lower}}(urlEqualTo(url)));
        {% else %}
        stub({% if entry.value.responseStatus is empty%}OK{% else %}{{ entry.value.responseStatus }}{% endif %}, {% if entry.value.responseType is not empty%}buildBody(response){% else %}null{% endif %}, {{entry.value.httpMethod.name() | lower}}(urlPathEqualTo(url))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
        );
        {% endif %}
    }

    public void {{entry.value.httpMethod.name() | lower}}{{entry.value.methodName}}(int httpStatus, String errorResponse{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type | raw}} {{entry2.value.name}}{% endfor %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        {% if entry.value.hasMultiValueRequestParams %}
            {% for entry2 in entry.value.requestParameters %}
                {% if loop.first %}
                        url = url + "?";
                    {% else %}
                        url = url + "&";
                    {% endif %}
                {% if entry2.value.iterable %}
                        url = url + "{{entry2.value.name}}=";
                        url = url + String.join("&{{entry2.value.name}}=", {{entry2.value.name}}.stream().map(x -> x.toString()).collect(toList()));
                    {% else %}
                        url = url + "{{entry2.value.name}}=" + {{entry2.value.name}};
                    {% endif %}
            {% endfor %}
        stub(httpStatus, errorResponse, {{entry.value.httpMethod.name() | lower}}(urlEqualTo(url)));
        {% else %}
        stub(httpStatus, errorResponse, {{entry.value.httpMethod.name() | lower}}(urlPathEqualTo(url))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
        );
        {% endif %}
    }

    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}{% for entry2 in entry.value.requestParameters %}{{entry2.value.type | raw}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (((entry.value.requestParameters is not empty) or (entry.value.pathVariables  is not empty)) and entry.value.requestBody is not empty)%}, {% endif %}{% if entry.value.requestBody is not empty%}{{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}(ONCE{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.name}}{% endfor %}{% if entry.value.requestBody is not empty%}, {{ entry.value.requestBody.name }}{% endif %});
    }

    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}(final int times{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type | raw}} {{entry2.value.name}}{% endfor %}{% if entry.value.requestBody is not empty%}, {{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        {% if entry.value.hasMultiValueRequestParams %}
            {% for entry2 in entry.value.requestParameters %}
                {% if loop.first %}
                            url = url + "?";
                        {% else %}
                            url = url + "&";
                        {% endif %}
                {% if entry2.value.iterable %}
                            url = url + "{{entry2.value.name}}=";
                            url = url + String.join("&{{entry2.value.name}}=", {{entry2.value.name}}.stream().map(x -> x.toString()).collect(toList()));
                        {% else %}
                            url = url + "{{entry2.value.name}}=" + {{entry2.value.name}};
                        {% endif %}
            {% endfor %}
        verify(times, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlEqualTo(format(url)))
                {% if entry.value.requestBody is not empty%}
                .withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})))
                {% endif %}
        );
        {% else %}
        verify(times, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlPathEqualTo(format(url)))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
                {% if entry.value.requestBody is not empty%}
                .withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})))
                {% endif %}
        );
        {% endif %}
    }

    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}NoInteraction({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}{% for entry2 in entry.value.requestParameters %}{{entry2.value.type | raw}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (((entry.value.requestParameters is not empty) or (entry.value.pathVariables  is not empty)) and entry.value.requestBody is not empty)%}, {% endif %}{% if entry.value.requestBody is not empty%}{{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        {% if entry.value.hasMultiValueRequestParams %}
            {% for entry2 in entry.value.requestParameters %}
                {% if loop.first %}
                            url = url + "?";
                        {% else %}
                            url = url + "&";
                        {% endif %}
                {% if entry2.value.iterable %}
                            url = url + "{{entry2.value.name}}=";
                            url = url + String.join("&{{entry2.value.name}}=", {{entry2.value.name}}.stream().map(x -> x.toString()).collect(toList()));
                        {% else %}
                            url = url + "{{entry2.value.name}}=" + {{entry2.value.name}};
                        {% endif %}
            {% endfor %}
        verify(NEVER, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlEqualTo(format(url)))
                {% if entry.value.requestBody is not empty%}
                .withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})))
                {% endif %}
        );
        {% else %}
        verify(NEVER, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlPathEqualTo(format(url)))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
                {% if entry.value.requestBody is not empty%}
                .withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})))
                {% endif %}
        );
        {% endif %}
    }

    {% if not entry.value.hasMultiValueRequestParams %}
    public void verify{{entry.value.httpMethod.name() | lower | title}}{{entry.value.methodName}}NoInteractionWithUrl({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        verify(NEVER, {{entry.value.httpMethod.name() | lower}}RequestedFor(urlPathEqualTo(format(url))));
    }
    {% endif %}
    {% endfor %}

    void stub(final int status, final String response, final MappingBuilder mappingBuilder) {
        stubFor(mappingBuilder
                .willReturn(
                        aResponse()
                                .withStatus(status)
                                .withBody(response)
                                .withHeader(CONTENT_TYPE_HEADER_NAME, CONTENT_TYPE_HEADER_VALUE)
                )
        );
    }

    String buildBody(final Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
