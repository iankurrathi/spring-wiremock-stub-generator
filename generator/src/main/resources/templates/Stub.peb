package {# @pebvariable name="model" type="io.lsdconsulting.stub.model.ControllerModel" #}{{model.packageName}};

import com.fasterxml.jackson.databind.ObjectMapper;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static java.lang.String.format;
import java.net.URLEncoder;
import java.util.List;
import javax.annotation.processing.Generated;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class {{model.stubClassName}} extends StubBase {

    private static final int OK = 200;
    public static final int ONCE = 1;

    private ObjectMapper objectMapper;

    public {{model.stubClassName}}(ObjectMapper objectMapper) {
        super(objectMapper);
        this.objectMapper = objectMapper;
    }

    {% for entry in model.getResources %}

    private static final String {{entry.value.methodName.toUpperCase()}}_URL = "{{model.rootResource}}{{entry.value.subResource}}";

    public void get{{entry.value.methodName}}({{entry.value.responseType}} response{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        stub(OK, buildBody(response), get(urlPathEqualTo(url))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
        );
    }

    public void get{{entry.value.methodName}}(int httpStatus, String errorResponse{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        stub(httpStatus, errorResponse, get(urlPathEqualTo(url))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
        );
    }

    public void verifyGet{{entry.value.methodName}}({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}{% for entry2 in entry.value.requestParameters %}{{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}) {
        verifyGet{{entry.value.methodName}}(ONCE{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.name}}{% endfor %});
    }

    public void verifyGet{{entry.value.methodName}}(final int times{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        verify(times, getRequestedFor(urlPathEqualTo(format(url)))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
        );
    }
    {% endfor %}

}
