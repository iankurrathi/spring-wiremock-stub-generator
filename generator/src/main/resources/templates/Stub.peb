package {# @pebvariable name="model" type="io.lsdconsulting.stub.model.ControllerModel" #}{{model.packageName}};

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import static java.lang.String.format;
import javax.annotation.processing.Generated;

import static com.github.tomakehurst.wiremock.client.WireMock.*;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class {{model.stubClassName}} {

    private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
    private static final String CONTENT_TYPE_HEADER_VALUE = "application/json; charset=utf-8";
    private static final int OK = 200;
    public static final int ONCE = 1;

    private ObjectMapper objectMapper;

    public {{model.stubClassName}}(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    {% for entry in model.getResources %}

    private static final String {{entry.value.methodName.toUpperCase()}}_URL = "{{model.rootResource}}{{entry.value.subResource}}";

    public void {{entry.value.getHttpMethodName()}}{{entry.value.methodName}}({{entry.value.responseType}} response{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        stub(OK, buildBody(response), {{entry.value.getHttpMethodName()}}(urlPathEqualTo(url))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
        );
    }

    public void {{entry.value.getHttpMethodName()}}{{entry.value.methodName}}(int httpStatus, String errorResponse{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        stub(httpStatus, errorResponse, {{entry.value.getHttpMethodName()}}(urlPathEqualTo(url))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
        );
    }

    public void verify{{entry.value.getHttpMethodName() | title}}{{entry.value.methodName}}({% for entry2 in entry.value.pathVariables %} {{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (entry.value.requestParameters is not empty) and (entry.value.pathVariables  is not empty)%}, {% endif %}{% for entry2 in entry.value.requestParameters %}{{entry2.value.type}} {{entry2.value.name}}{% if not loop.last %}, {% endif %}{% endfor %}{% if (((entry.value.requestParameters is not empty) or (entry.value.pathVariables  is not empty)) and entry.value.requestBody is not empty)%}, {% endif %}{% if entry.value.requestBody is not empty%}{{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        verify{{entry.value.getHttpMethodName() | title}}{{entry.value.methodName}}(ONCE{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.name}}{% endfor %}{% if entry.value.requestBody is not empty%}, {{ entry.value.requestBody.name }}{% endif %});
    }

    public void verify{{entry.value.getHttpMethodName() | title}}{{entry.value.methodName}}(final int times{% for entry2 in entry.value.pathVariables %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% for entry2 in entry.value.requestParameters %}, {{entry2.value.type}} {{entry2.value.name}}{% endfor %}{% if entry.value.requestBody is not empty%}, {{ entry.value.requestBody.type }} {{ entry.value.requestBody.name }}{% endif %}) {
        String url = String.format({{entry.value.methodName.toUpperCase()}}_URL{% for entry2 in entry.value.pathVariables %}, {{entry2.value.name}} {% endfor %});
        verify(times, {{entry.value.getHttpMethodName()}}RequestedFor(urlPathEqualTo(format(url)))
                {% for entry2 in entry.value.requestParameters %}
                 .withQueryParam("{{entry2.value.name}}", equalTo({{entry2.value.name}}))
                {% endfor %}
                {% if entry.value.requestBody is not empty%}
                .withRequestBody(equalToJson(buildBody({{ entry.value.requestBody.name }})))
                {% endif %}
        );
    }
    {% endfor %}

    void stub(final int status, final String response, final MappingBuilder mappingBuilder) {
        stubFor(mappingBuilder
                .willReturn(
                        aResponse()
                                .withStatus(status)
                                .withBody(response)
                                .withHeader(CONTENT_TYPE_HEADER_NAME, CONTENT_TYPE_HEADER_VALUE)
                )
        );
    }

    String buildBody(final Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
